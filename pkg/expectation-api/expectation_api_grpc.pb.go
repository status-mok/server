// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: expectation-api/expectation_api.proto

package expectation_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpectationServiceClient is the client API for ExpectationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpectationServiceClient interface {
	// Create
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Delete
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type expectationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpectationServiceClient(cc grpc.ClientConnInterface) ExpectationServiceClient {
	return &expectationServiceClient{cc}
}

func (c *expectationServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/statusmok.server.ExpectationService.ExpectationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expectationServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/statusmok.server.ExpectationService.ExpectationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpectationServiceServer is the server API for ExpectationService service.
// All implementations must embed UnimplementedExpectationServiceServer
// for forward compatibility
type ExpectationServiceServer interface {
	// Create
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Delete
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedExpectationServiceServer()
}

// UnimplementedExpectationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpectationServiceServer struct {
}

func (UnimplementedExpectationServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedExpectationServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedExpectationServiceServer) mustEmbedUnimplementedExpectationServiceServer() {}

// UnsafeExpectationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpectationServiceServer will
// result in compilation errors.
type UnsafeExpectationServiceServer interface {
	mustEmbedUnimplementedExpectationServiceServer()
}

func RegisterExpectationServiceServer(s grpc.ServiceRegistrar, srv ExpectationServiceServer) {
	s.RegisterService(&ExpectationService_ServiceDesc, srv)
}

func _ExpectationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpectationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statusmok.server.ExpectationService.ExpectationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpectationServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpectationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpectationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statusmok.server.ExpectationService.ExpectationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpectationServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpectationService_ServiceDesc is the grpc.ServiceDesc for ExpectationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpectationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statusmok.server.ExpectationService.ExpectationService",
	HandlerType: (*ExpectationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ExpectationService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ExpectationService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "expectation-api/expectation_api.proto",
}
