// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mok "github.com/status-mok/server/internal/mok"
	mock "github.com/stretchr/testify/mock"
)

// ServerMock is an autogenerated mock type for the ServerMock type
type ServerMock struct {
	mock.Mock
}

// Addr provides a mock function with given fields:
func (_m *ServerMock) Addr() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *ServerMock) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *ServerMock) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *ServerMock) Status() mok.ServerStatus {
	ret := _m.Called()

	var r0 mok.ServerStatus
	if rf, ok := ret.Get(0).(func() mok.ServerStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mok.ServerStatus)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *ServerMock) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewServerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewServerMock creates a new instance of ServerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServerMock(t mockConstructorTestingTNewServerMock) *ServerMock {
	mock := &ServerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
