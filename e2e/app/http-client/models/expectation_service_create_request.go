// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExpectationServiceCreateRequest expectation service create request
//
// swagger:model ExpectationServiceCreateRequest
type ExpectationServiceCreateRequest struct {

	// ID is a unique identifier of expectation.
	// Example: 95423706-1d7c-431b-b182-3b95eb63310b
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// Route URL is a relative URI of the route.
	// Example: /some-url
	// Required: true
	// Min Length: 1
	RouteURL *string `json:"route_url"`

	// Server name is a unique identifier of the mock server.
	// Example: http-server-8080
	// Required: true
	// Min Length: 1
	ServerName *string `json:"server_name"`
}

// Validate validates this expectation service create request
func (m *ExpectationServiceCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExpectationServiceCreateRequest) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", m.ID, 1); err != nil {
		return err
	}

	return nil
}

func (m *ExpectationServiceCreateRequest) validateRouteURL(formats strfmt.Registry) error {

	if err := validate.Required("route_url", "body", m.RouteURL); err != nil {
		return err
	}

	if err := validate.MinLength("route_url", "body", *m.RouteURL, 1); err != nil {
		return err
	}

	return nil
}

func (m *ExpectationServiceCreateRequest) validateServerName(formats strfmt.Registry) error {

	if err := validate.Required("server_name", "body", m.ServerName); err != nil {
		return err
	}

	if err := validate.MinLength("server_name", "body", *m.ServerName, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this expectation service create request based on context it is used
func (m *ExpectationServiceCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExpectationServiceCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExpectationServiceCreateRequest) UnmarshalBinary(b []byte) error {
	var res ExpectationServiceCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
