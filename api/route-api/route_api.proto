syntax = "proto3";

package statusmok.server.RouteService;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/status-mok/server/pkg/route-api;route_api";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "default";
    value: {
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
        example: "{\"code\":5,\"message\":\"not found\"}"
      }
    }
  }
};

service RouteService {
  // Create
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/route/create"
      body: "*"
    };
  }
  // Delete
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      post: "/route/delete"
      body: "*"
    };
  }
}

enum RouteType {
  ROUTE_TYPE_UNSPECIFIED = 0;
  ROUTE_TYPE_REQ_RESP = 1;
  ROUTE_TYPE_WEBSOCKET = 2;
}

message CreateRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "server_name",
        "url",
        "type"
      ]
    }
  };

  // Server name is a unique identifier of the mock server.
  string server_name = 1 [
    json_name = "server_name",
    (validate.rules).string = {
      min_len: 1,
      max_len: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"http-server-8080\""
    }
  ];
  // URL is a relative URI of the route.
  string url = 2 [
    json_name = "url",
    (validate.rules).string.uri_ref = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"/some-url\""
    }
  ];
  // The route type.
  /*
     1: ReqResp
     2: WebSocket
  */
  RouteType type = 3 [
    json_name = "type",
    (validate.rules).enum.defined_only = true
  ];
}

message CreateResponse {
  bool success = 1 [
    json_name = "success",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field).example = "true"
  ];
}

message DeleteRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "server_name",
        "url"
      ]
    }
  };

  // Server name is a unique identifier of the mock server.
  string server_name = 1 [
    json_name = "server_name",
    (validate.rules).string = {
      min_len: 1,
      max_len: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"http-server-8080\""
    }
  ];
  // URL is a relative URI of the route.
  string url = 2 [
    json_name = "url",
    (validate.rules).string.uri_ref = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"/some-url\""
    }
  ];
}

message DeleteResponse {
  bool success = 1 [
    json_name = "success",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field).example = "true"
  ];
}
