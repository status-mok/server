syntax = "proto3";

package statusmok.server.ServerService;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/status-mok/server/pkg/server-api;server_api";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "default";
    value: {
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
        example: "{\"code\":5,\"message\":\"not found\"}"
      }
    }
  }
};

service ServerService {
  // Create
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/server/create"
      body: "*"
    };
  }
  // Delete
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      post: "/server/delete"
      body: "*"
    };
  }
  // Start
  rpc Start(StartRequest) returns (StartResponse) {
    option (google.api.http) = {
      post: "/server/start"
      body: "*"
    };
  }
  // Stop
  rpc Stop(StopRequest) returns (StopResponse) {
    option (google.api.http) = {
      post: "/server/stop"
      body: "*"
    };
  }
}

enum ServerType {
  SERVER_TYPE_UNSPECIFIED = 0;
  SERVER_TYPE_HTTP = 1;
  SERVER_TYPE_GRPC = 2;
  SERVER_TYPE_THRIFT = 3;
  SERVER_TYPE_TCP = 4;
  SERVER_TYPE_UDP = 5;
}

message CreateRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "name",
        "port",
        "type"
      ]
    }
  };

  // Name is a unique identifier of the mock server.
  string name = 1 [
    json_name = "name",
    (validate.rules).string = {
      min_len: 1,
      max_len: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"http-server-8080\""
    }
  ];
  // The mock server shall bind to this IP address.
  optional string ip = 2 [
    json_name = "ip",
    (validate.rules).string = {
      ignore_empty: true,
      ip: true
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"0.0.0.0\""
    }
  ];
  // The mock server shall listen to this port. If the port is 0, then a random port will be specified on server start.
  uint32 port = 3 [
    json_name = "port",
    (validate.rules).uint32 = {
      gte: 0,
      lte: 65535,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      minimum: 0,
      maximum: 65535,
      example: "8080"
    }
  ];
  // The mock server type.
  /*
     1: HTTP
     2: GRPC
     3: Thrift
     4: TCP
     5: UDP
  */
  ServerType type = 4 [
    json_name = "type",
    (validate.rules).enum.defined_only = true
  ];
}

message CreateResponse {
  bool success = 1 [
    json_name = "success",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field).example = "true"
  ];
}

message DeleteRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["name"]
    }
  };

  // Name is a unique identifier of the mock server.
  string name = 1 [
    json_name = "name",
    (validate.rules).string = {
      min_len: 1,
      max_len: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"http-server-8080\""
    }
  ];
}

message DeleteResponse {
  bool success = 1 [
    json_name = "success",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field).example = "true"
  ];
}

message StartRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["name"]
    }
  };

  // Name is a unique identifier of the mock server.
  string name = 1 [
    json_name = "name",
    (validate.rules).string = {
      min_len: 1,
      max_len: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"http-server-8080\""
    }
  ];
}

message StartResponse {
  bool success = 1 [
    json_name = "success",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field).example = "true"
  ];
  string address = 2 [
    json_name = "address",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"0.0.0.0:8080\""
    }
  ];
}

message StopRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: ["name"]
    }
  };

  // Name is a unique identifier of the mock server.
  string name = 1 [
    json_name = "name",
    (validate.rules).string = {
      min_len: 1,
      max_len: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"http-server-8080\""
    }
  ];
}

message StopResponse {
  bool success = 1 [
    json_name = "success",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field).example = "true"
  ];
}
