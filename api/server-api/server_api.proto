syntax = "proto3";

package statusmok.server.server;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/status-mok/server/pkg/server-api;server_api";

service ServerService {
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/server/create"
      body: "*"
    };
  }
}

message CreateRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "name",
        "port"
      ]
    }
  };

  // Name is a unique identifier of server.
  string name = 1 [
    json_name = "name",
    (validate.rules).string = {
      min_len: 1,
      max_len: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"http-server-8080\""
    }
  ];
  // The server shall listen to this IP address.
  optional string ip = 2 [
    json_name = "ip",
    (validate.rules).string = {
      ignore_empty: true,
      ip: true
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"0.0.0.0\""
    }
  ];
  // The server shall listen to this port.
  uint32 port = 3 [
    json_name = "port",
    (validate.rules).uint32 = {
      gte: 0,
      lte: 65535,
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      minimum: 0,
      maximum: 65535,
      example: "8080"
    }
  ];
}

message CreateResponse {}
