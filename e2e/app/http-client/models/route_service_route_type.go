// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RouteServiceRouteType route service route type
//
// swagger:model RouteServiceRouteType
type RouteServiceRouteType string

func NewRouteServiceRouteType(value RouteServiceRouteType) *RouteServiceRouteType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RouteServiceRouteType.
func (m RouteServiceRouteType) Pointer() *RouteServiceRouteType {
	return &m
}

const (

	// RouteServiceRouteTypeROUTETYPEUNSPECIFIED captures enum value "ROUTE_TYPE_UNSPECIFIED"
	RouteServiceRouteTypeROUTETYPEUNSPECIFIED RouteServiceRouteType = "ROUTE_TYPE_UNSPECIFIED"

	// RouteServiceRouteTypeROUTETYPEREQRESP captures enum value "ROUTE_TYPE_REQ_RESP"
	RouteServiceRouteTypeROUTETYPEREQRESP RouteServiceRouteType = "ROUTE_TYPE_REQ_RESP"

	// RouteServiceRouteTypeROUTETYPEWEBSOCKET captures enum value "ROUTE_TYPE_WEBSOCKET"
	RouteServiceRouteTypeROUTETYPEWEBSOCKET RouteServiceRouteType = "ROUTE_TYPE_WEBSOCKET"
)

// for schema
var routeServiceRouteTypeEnum []interface{}

func init() {
	var res []RouteServiceRouteType
	if err := json.Unmarshal([]byte(`["ROUTE_TYPE_UNSPECIFIED","ROUTE_TYPE_REQ_RESP","ROUTE_TYPE_WEBSOCKET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routeServiceRouteTypeEnum = append(routeServiceRouteTypeEnum, v)
	}
}

func (m RouteServiceRouteType) validateRouteServiceRouteTypeEnum(path, location string, value RouteServiceRouteType) error {
	if err := validate.EnumCase(path, location, value, routeServiceRouteTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this route service route type
func (m RouteServiceRouteType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRouteServiceRouteTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this route service route type based on context it is used
func (m RouteServiceRouteType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
