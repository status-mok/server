syntax = "proto3";

package statusmok.server.ExpectationService;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/status-mok/server/pkg/expectation-api;expectation_api";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "default";
    value: {
      schema: {
        json_schema: {ref: ".google.rpc.Status"}
        example: "{\"code\":5,\"message\":\"not found\"}"
      }
    }
  }
};

service ExpectationService {
  // Create
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/expectation/create"
      body: "*"
    };
  }
  // Delete
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      post: "/expectation/delete"
      body: "*"
    };
  }
}

message CreateRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "server_name",
        "route_url"
      ]
    }
  };

  // Server name is a unique identifier of the mock server.
  string server_name = 1 [
    json_name = "server_name",
    (validate.rules).string = {
      min_len: 1,
      max_len: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"http-server-8080\""
    }
  ];
  // Route URL is a relative URI of the route.
  string route_url = 2 [
    json_name = "route_url",
    (validate.rules).string.uri_ref = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"/some-url\""
    }
  ];
  // ID is a unique identifier of expectation.
  optional string id = 3 [
    json_name = "id",
    (validate.rules).string = {
      ignore_empty: true,
      min_len: 1
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"95423706-1d7c-431b-b182-3b95eb63310b\""
    }
  ];
}

message CreateResponse {
  bool success = 1 [
    json_name = "success",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field).example = "true"
  ];
}

message DeleteRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "server_name",
        "route_url",
        "id"
      ]
    }
  };

  // Server name is a unique identifier of the mock server.
  string server_name = 1 [
    json_name = "server_name",
    (validate.rules).string = {
      min_len: 1,
      max_len: 100
    },
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"http-server-8080\""
    }
  ];
  // Route URL is a relative URI of an route.
  string route_url = 2 [
    json_name = "route_url",
    (validate.rules).string.uri_ref = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"/some-url\""
    }
  ];
  // ID is a unique identifier of an expectation.
  string id = 3 [
    json_name = "id",
    (validate.rules).string = {min_len: 1},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      example: "\"95423706-1d7c-431b-b182-3b95eb63310b\""
    }
  ];
}

message DeleteResponse {
  bool success = 1 [
    json_name = "success",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field).example = "true"
  ];
}
